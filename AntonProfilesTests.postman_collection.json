{
	"info": {
		"_postman_id": "b16c9ae4-1f93-4d9d-af24-d3742ed847fe",
		"name": "AntonProfilesTests",
		"description": "Коллекция ранится без указания окружения. Чтобы запускать запросы отдельно, необходимо создать окружение. Вводить значения в окружения не ненужно. Значения в окружения установяться после прогона первого по списку запроса - \"Создание рандомного пользователя\". Создатель: Антон Домеников.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Создание рандомного пользователя. Запись переменных в окружение.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d363578e-e296-4174-9be4-ad320463adaf",
						"exec": [
							"var jsonData = JSON.parse(responseBody); // Получаем обьект JSON из боди респонса, чтобы можно было использовать ключи и значения JSON боди, для теста или создания переменных.",
							"postman.setEnvironmentVariable(\"randomUsername\", jsonData.user.username); // Создаем для окружения переменную \"randomUsername\" и указываем путь к ключу боди респонса, чтобы присвоить значение этого ключа нашей переменной. Путь - jsonData.user.username.",
							"postman.setEnvironmentVariable(\"randomToken\", jsonData.token);",
							"postman.setEnvironmentVariable(\"Pk\", jsonData.user.pk);",
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
							"});",
							"if (responseCode.code === 201) {tests[\"Status code is 201\"] = true;}",
							"else {tests [\"Status code is not 201\"] = false;}",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "54c01f0d-4f32-4477-b89a-4561cfffe87b",
						"exec": [
							"const testlink = \"http://light-it-03.tk\"; //Присваиваем переменной testlink значение http://light-it-03.tk",
							"pm.environment.set(\"URL\", testlink); // Создаем в окружении переменную URL со значением предыдущей переменной testlink.",
							"const pass = Math.random().toString(16).substring(2, 15) +",
							"        Math.random().toString(16).substring(2, 15); // Присваиваем переменной pass случайное значение. toString(36) - значение будет состоять из hex чисел. substring(2, 15) - указываем длину значения от 2 до 15 символов.",
							"pm.environment.set(\"randomPassword\", pass);",
							"const user = \"AntonTest\" + Math.random().toString(16).substring(2, 8);",
							"pm.environment.set(\"randomUsername\", user);",
							"const email = \"test\" + Math.random().toString(16).substring(2, 8);",
							"pm.environment.set(\"randomEmail\", email);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{randomUsername}}\",\n    \"email\": \"{{randomEmail}}@test.com\",\n    \"password1\": \"{{randomPassword}}\",\n    \"password2\": \"{{randomPassword}}\"\n}"
				},
				"url": {
					"raw": "{{URL}}/api/profiles/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"profiles",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение пароля учетной записи.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b19ee266-fb7a-4f86-ac0d-630a5e649f05",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response time is less than 900ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(900);",
							"});",
							"pm.test(\"Сообщение правильное. New password has been saved.\", function (){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.detail).to.eql(\"New password has been saved.\");",
							"});",
							"",
							"pm.test(\"Response body is correct\", function () {",
							"    pm.response.to.have.body({",
							"    \"detail\": \"New password has been saved.\"",
							"});",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e12c3afa-22ac-47d8-b8c2-2212749a7d9f",
						"exec": [
							"const newpass = Math.random().toString(36).substring(2, 15) +",
							"        Math.random().toString(36).substring(2, 15);",
							"pm.environment.set(\"NewRandomPassword\", newpass);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{randomPassword}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{randomUsername}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"new_password1\": \"{{NewRandomPassword}}\",\n  \"new_password2\": \"{{NewRandomPassword}}\"\n}"
				},
				"url": {
					"raw": "{{URL}}/api/profiles/password/change/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"profiles",
						"password",
						"change",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание существующего пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d363578e-e296-4174-9be4-ad320463adaf",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response body is correct\", function () {",
							"    pm.response.to.have.body({",
							"        \"username\": [",
							"        \"A user with that username already exists.\"",
							"    ],",
							"});",
							"});",
							"",
							"pm.test(\"Response time is less than 100ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(100);",
							"});",
							"",
							"pm.test(\"Сообщение правильное. A user with that username already exists.\", function (){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.username).to.eql([\"A user with that username already exists.\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "54c01f0d-4f32-4477-b89a-4561cfffe87b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{randomUsername}}\",\n    \"email\": \"Testik+{{$randomint}}@test.com\",\n    \"password1\": \"{{randomPassword}}\",\n    \"password2\": \"{{randomPassword}}\"\n}"
				},
				"url": {
					"raw": "{{URL}}/api/profiles/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"profiles",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание user с существующим email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d363578e-e296-4174-9be4-ad320463adaf",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response body is correct\", function () {",
							"    pm.response.to.have.body({",
							"        \"email\": [",
							"        \"A user is already registered with this e-mail address.\"",
							"    ],",
							"});",
							"});",
							"",
							"pm.test(\"Response time is less than 100ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(100);",
							"});",
							"",
							"pm.test(\"Сообщение правильное. A user is already registered with this e-mail address.\", function (){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.eql([\"A user is already registered with this e-mail address.\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "54c01f0d-4f32-4477-b89a-4561cfffe87b",
						"exec": [
							"const user = \"TestUser\" + Math.random().toString(16).substring(2, 8);",
							"pm.environment.set(\"TestUserEmail\", user);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{TestUserEmail}}\",\n    \"email\": \"{{randomEmail}}@test.com\",\n    \"password1\": \"{{randomPassword}}\",\n    \"password2\": \"{{randomPassword}}\"\n}"
				},
				"url": {
					"raw": "{{URL}}/api/profiles/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"profiles",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Неверный емейл",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d363578e-e296-4174-9be4-ad320463adaf",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response body is correct\", function () {",
							"    pm.response.to.have.body({",
							"        \"email\": [",
							"        \"Enter a valid email address.\"",
							"    ]",
							"});",
							"});",
							"pm.test(\"Response time is less than 100ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(100);",
							"});",
							"",
							"pm.test(\"Сообщение правильное. Enter a valid email address.\", function (){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.eql([\"Enter a valid email address.\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{$guid}}\",\n    \"email\": \"antontoxaby\",\n    \"password1\": \"{{randomPassword}}\",\n    \"password2\": \"{{randomPassword}}\"\n}"
				},
				"url": {
					"raw": "{{URL}}/api/profiles/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"profiles",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Неверный пароль",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d363578e-e296-4174-9be4-ad320463adaf",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response body is correct\", function () {",
							"    pm.response.to.have.body({",
							"    \"password1\": [",
							"        \"This password is too short. It must contain at least 8 characters.\",",
							"        \"This password is entirely numeric.\"",
							"    ]",
							"});",
							"});",
							"pm.test(\"Response time is less than 100ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(100);",
							"});",
							"",
							"pm.test(\"Сообщение правильное. This password is too short. It must contain at least 8 characters.\",",
							"        \"This password is entirely numeric.\", function (){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.password1).to.eql ([\"This password is too short. It must contain at least 8 characters.\",",
							"        \"This password is entirely numeric.\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{$guid}}\",\n    \"email\": \"test+{{$guid}}@test.com\",\n    \"password1\": \"1\",\n    \"password2\": \"1\"\n}"
				},
				"url": {
					"raw": "{{URL}}/api/profiles/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"profiles",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Успешный Логин",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c261693e-019c-4930-8326-68576e568207",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response time is less than 350ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(350);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5c09fb7e-02b9-42fc-b95e-0cd8ccc2b6f4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{randomUsername}}\",\n    \"email\": \"{{randomEmail}}@test.com\",\n    \"password\": \"{{NewRandomPassword}}\"\n}"
				},
				"url": {
					"raw": "{{URL}}/api/profiles/login/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"profiles",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Вход без данных пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b19ee266-fb7a-4f86-ac0d-630a5e649f05",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response body is correct\", function () {",
							"    pm.response.to.have.body({",
							"    \"detail\": \"Invalid username/password.\"",
							"});",
							"});",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"pm.test(\"Сообщение правильное. Invalid username/password.\", function (){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.detail).to.eql (\"Invalid username/password.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"new_password1\": \"{{randomPassword}}\",\n  \"new_password2\": \"{{randomPassword}}\"\n}"
				},
				"url": {
					"raw": "{{URL}}/api/profiles/password/change/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"profiles",
						"password",
						"change",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление токена",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b19ee266-fb7a-4f86-ac0d-630a5e649f05",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"token\": \"{{randomToken}}\"\n }"
				},
				"url": {
					"raw": "{{URL}}/api/token-refresh/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"token-refresh",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Проверка токена",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b19ee266-fb7a-4f86-ac0d-630a5e649f05",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(300);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"token\": \"{{randomToken}}\"\n }"
				},
				"url": {
					"raw": "{{URL}}/api/token-verify/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"token-verify",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение имени, фамилии пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d363578e-e296-4174-9be4-ad320463adaf",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"firstName\", jsonData.first_name);",
							"postman.setEnvironmentVariable(\"lastName\", jsonData.last_name);",
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "54c01f0d-4f32-4477-b89a-4561cfffe87b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{NewRandomPassword}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{randomUsername}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{randomUsername}}\",\n    \"first_name\": \"Антон\",\n    \"last_name\": \"Тестовый\"\n}"
				},
				"url": {
					"raw": "{{URL}}/api/profiles/user/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"profiles",
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение имени на более 30 символов.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d363578e-e296-4174-9be4-ad320463adaf",
						"exec": [
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"pm.test(\"Response body is correct\", function () {",
							"    pm.response.to.have.body({",
							"    \"first_name\": [",
							"        \"Ensure this field has no more than 30 characters.\"",
							"    ]",
							"});",
							"});",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"})",
							"",
							"pm.test(\"Сообщение правильное. Ensure this field has no more than 30 characters.\", function (){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.first_name).to.eql ([\"Ensure this field has no more than 30 characters.\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "54c01f0d-4f32-4477-b89a-4561cfffe87b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{NewRandomPassword}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{randomUsername}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{randomUsername}}\",\n    \"first_name\": \"АнтонТестАнтонТестАнтонТестАн31\",\n    \"last_name\": \"Testovy\"\n    }"
				},
				"url": {
					"raw": "{{URL}}/api/profiles/user/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"profiles",
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение фамилии на более 150 символов.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d363578e-e296-4174-9be4-ad320463adaf",
						"exec": [
							"",
							"pm.test(\"Формат ответа приходит в application/json\", function() {",
							"pm.response.to.have.header(\"Content-Type\");",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"pm.test(\"Response body is correct\", function () {",
							"    pm.response.to.have.body({",
							"    \"last_name\": [",
							"        \"Ensure this field has no more than 150 characters.\"",
							"    ]",
							"});",
							"});",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Сообщение правильное. Ensure this field has no more than 150 characters.\", function (){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.last_name).to.eql([\"Ensure this field has no more than 150 characters.\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "54c01f0d-4f32-4477-b89a-4561cfffe87b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{NewRandomPassword}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{randomUsername}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{randomUsername}}\",\n    \"first_name\": \"Anton\",\n    \"last_name\": \"АнтонТестАнтонТестАнтонТестАнтонТестАнтонТестАнтонТестАнтонТестАнтонТестАнтонТестАнтонТестАнтонТестАнтонТестАнтонТестАнтонТестАнтонТестАнтонТестАнто151\"\n    }"
				},
				"url": {
					"raw": "{{URL}}/api/profiles/user/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"profiles",
						"user",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5644b7d0-5e0e-4ca4-bfdd-7f9db5ca4b04",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1ebd9e46-cc2b-442a-bc3d-90e498cd18ab",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}